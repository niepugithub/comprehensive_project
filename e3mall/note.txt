页面静态化：

	不是改后缀，改后缀是伪静态化
	真的生成html，将html响应给用户就OK了

freemarker 基于模板生成的静态页面的工具包

day9 - 9 sublime操作多行


freemarker页面静态化：html页面直接存在于用户浏览器，如果是jsp的话，每次都要根据jsp重新生成html
添加商品之后，e3-item-web会监听，然后创建对应商品的静态html页面，这个html页面可以放在nginx服务器上
加上静态的js,css样式，就会跟我们直接静态看的是一样的；
这样当用户点击商品查看详细的时候，我们可以将连接链到nginx服务器上，直接响应静态页面，会很快

分布式session分析
tomcat有session共享功能，但是session之间共享会限制集群度，无法通过扩容应对高并发
所以不能用session共享模式，而是将session抽取出来，统一管理；所有的tomcat服务器都不直接
存储session，而使用单独的服务器存储session，所以不用tomcat自己的session而使用我们自己
模拟的session使用redis缓存，session是键值对且有过期时间，与redis如出一辙

将session放入到redis中，那么用什么做key?
不能用userId，比如换电脑了，应该不是同一个session，如果用的userId，多台电脑登录还是一个session，不行！！
session有一个sessionId，通过sessionId区分不同会话，sessionId放在cookie中，下次请求带上sessionId
因此，我们需要模拟sessionId，并且不能重复；自己生成且不重复，使用uuid，也就是token，本质是sessionId
key就是token，一个token对应一个session，一个session对应一个用户信息
value：用户信息

需要将key（token）写入到cookie，下次用户请求会带上



单点登录系统，主要是解决session共享问题


分布式事务：
    跨数据库的事务（oracle，mysql之间跨事务等）很麻烦，效率还很低；
    企业内部可以承受，互联网项目无法承受长时间等待

用户提交订单消息，发送消息给中间件；直接响应给用户；mq实现最终的一致性，实际上并没有直接去使用分布式事务

分布式项目中一般也很少用到分布式锁

登录成功后，页眉上应该显示用户信息，而不是请登录
如何获取到用户信息呢？写在controller中不好，因为每个controller都要写；麻烦
我们写一个js，专门负责根据token获取用户信息；然后每个页面引用这个js；
因此，我们需要sso做一个restAPI，让js调用


js中根据token ajax请求获取用户信息分析：
（1）使用js从cookie中获取token
（2）ajax请求接口user/token/{token}
（3）得到json数据
（4）从json中解析出用户名
（5）把用户名显示在页面

解决ajax跨越请求：其实请求已经跨域发送请求OK了，只是浏览器不让取跨域的数据；解决方案就是js的一个特性或者
说漏洞：js可以跨域加载js文件；比如说我们如果本地没有js-min文件，可以直接写官网位置的js-min来获取


登录时使用购物车分析
为了保存购物车信息，不能简单用cookie的购物车，因此需要保存用户信息，用数据库不太好，量大撑不住，使用
redis存储购物车信息就好

用redis的hash类型最好了，key就是用户id，value中的key就是商品id，value就是商品转化成的json串

使用cookie实现购物车：
优点：
1、实现简单
2、不需要占用服务端存储空间。
缺点：
1、存储容量有限
2、更换设备购车信息不能同步。

实现购车商品数据同步：
1、要求用户登录。
2、把购物车商品列表保存到数据库中。推荐使用redis。
3、Key：用户id，value：购车商品列表。推荐使用hash，hash的field：商品id，value：商品信息。
4、在用户未登录情况下写cookie。当用户登录后，访问购物车列表时，
a)	把cookie中的数据同步到redis。
b)	把cookie中的数据删除
c)	展示购物车列表时以redis为准。
d)	如果redis中有数据cookie中也有数据，需要做数据合并。相同商品数量相加，不同商品添加一个新商品。
5、如果用户登录状态，展示购物车列表以redis为准。如果未登录，以cookie为准。

订单数据库分析：三个表：tb_order，tb_order_shipping，tb_order_item
订单id分析
唯一性如何保证？UUID等方法太长，不好
使用redis自增长，并且给出一个初始化的值

订单对应物流信息，商品信息等需要保存；订单和收货地址要一一对应

订单POJO放在何处分析
订单表现层需要POJO，表现层需要传递到订单服务层，因此两层都需要POJO；既然都用到，那就需要放在公共地方，放在
common中可否？不行，订单POJO需要继承TbItem，TbItem又是在manager-POJO中，这样会造成common依赖manager-POJO，
而manager-POJO依赖common，就会造成循环依赖

OrderPojo到底放在哪里合适呢？
放在order-interface OK
这样的order-service依赖接口，order-web也依赖，这样两者都需要就好办了。两者共同的地方除了common，其实还有
interface。interface也可以放POJO

service层中不要try异常，因为service层中有事务，try捕获异常，导致事务会认为处理OK了，所以就算捕获
到了异常还是得抛出去，那就没必要这么麻烦，干脆不捕获就好了；


